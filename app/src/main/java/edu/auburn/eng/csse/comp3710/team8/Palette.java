package edu.auburn.eng.csse.comp3710.team8;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.util.Log;

import java.util.Random;

/**
 * Primary Model class for PicYaPalette
 */
public class Palette {
    /* Storage for various Algorithm name keys. */
    public final class PaletteAlgorithm {
        public static final String RANDOM = "RANDOM";
        public static final String COMPLEMENTARY = "COMPLEMENTARY";
        public static final String DEFAULT = "DEFAULT";
    }

    /* Bundle key data */
    public static final String BUNDLE_NAME = "PALETTE_NAME_KEY";
    public static final String BUNDLE_ARRAY = "PALETTE_INT[]_KEY";

    /* Information for all Palettes to use */
    protected static int COUNTER = 0; // Used for numbering palettes for default names
    protected static final String DEFAULT_NAME = "Palette #";
    protected static int numColors = 3;

    /* Palette-specific data */
    protected String name;
    protected int[] colors; // Array implementation supports arbitrary number of colors

    /* Constructor. Accepts an array of color "seeds", which will populate the color array
     * and be used as a reference for any additional colors generated by the algorithm.
     * See Palette.PaletteAlgorithm for Algorithm types.
     */
    protected Palette(int[] colorSeeds, String algorithm) {
        name = DEFAULT_NAME + COUNTER++;
        colors = new int[numColors];
        if (algorithm == null) { // Just read in seed colors, no generation
            for (int i = 0; i < colorSeeds.length; i++) {
                colors[i] = (colorSeeds[i] | 0xFF000000); // Nullify transparency
            }
        }
        else if (algorithm.equals(PaletteAlgorithm.DEFAULT)) {  // Set colors manually for testing purposes
            colors[0] = 0xFF2D397E;
            colors[1] = 0xFFFFFFFF;
            colors[2] = 0xFFE47F13;
        }
        else { // Standard use case, fill in based on seeds, then generate remaining
            int i = 0;
            for (int j = 0; j < numColors; j++) {
                if (i < colorSeeds.length) { // If colors[j] found in seed, fill it in
                    colors[j] = (colorSeeds[i] | 0xFF000000); // Nullify transparency
                    i++;
                } else { // If colors[j] not found, generate it
                    colors[j] = generateColor(colors, algorithm);
                }
            }
        }
    }

    /* Constructor. Rebuilds the Palette from a Bundle,
     * ASSUMING that the Bundle has been created by getPaletteBundle().
     */
    protected Palette(Bundle paletteBundle) {
        if (paletteBundle != null) {
            name = paletteBundle.getString(BUNDLE_NAME);
            colors = paletteBundle.getIntArray(BUNDLE_ARRAY);
        }
    }

    /* Packages the Palette into a bundle so it can be easily passed between activities.
     * To be used with the Bundle constructor.
     */
    public Bundle getPaletteBundle() {
        Bundle b = new Bundle();
        b.putString(BUNDLE_NAME, name);
        b.putIntArray(BUNDLE_ARRAY, colors);
        return b;
    }

    /* Returns the color int array */
    public int[] getColors() {
        return colors;
    }

    /* Sets the Palette's name (for saving purposes) */
    public void setName(String nameIn) {
        name = nameIn;
    }

    /* Returns the Palette's name */
    public String getName() {
        return name;
    }

    /* Return the number of colors Palettes generate */
    public static int getNumColors() {
        return numColors;
    }

    /* Returns an array of Strings, specially formatted for use with
     * PaletteDetailsActivity.
     */
    public String[] getDetailedStrings() {
        String stgs[] = new String[numColors];
        for (int i = 0; i < numColors; i++) {
            String stg = "";
            stg += "0x" + Integer.toHexString(colors[i]).substring(2).toUpperCase() + "\n"
                +    "R: " + Color.red(colors[i]) + "\n"
                +    "G: " + Color.green(colors[i]) + "\n"
                +    "B: " + Color.blue(colors[i]) + "\n";
            stgs[i] = stg;
        }
        return stgs;
    }

    /* Renders the palette to a Bitmap. Size scales based on screen dimensions.
     */
    public Bitmap render(int screenWidth, int screenHeight) {
        final int RENDER_WIDTH = 7*screenWidth/16;
        final int RENDER_HEIGHT = screenHeight/8;
        final int RENDER_RADIUS = RENDER_HEIGHT/(numColors);
        // Return an image of the palette!
        Bitmap bmp = (Bitmap.createBitmap(RENDER_WIDTH, RENDER_HEIGHT, Bitmap.Config.ARGB_8888));
        Canvas canvas = new Canvas(bmp);
        int x = canvas.getWidth();
        int y = canvas.getHeight();
        Paint paint = new Paint();
        paint.setStyle(Paint.Style.FILL);
        for (int i = 0; i < numColors; i++) {
            paint.setColor(colors[i]);
            Log.i("render()", "Draw circle " + i + " Color: " + colors[i]);
            canvas.drawCircle(((i+1)*x)/(numColors+1), y/2, RENDER_RADIUS, paint);
        }
        return bmp;
    }

    /* Generates a new color to add to the Palette.
     * colorsIn[] can be read for reference as to which colors are already used.
     * algorithm is used to determine which generation algorithm will be used.
     * Make sure to OR our results with 0xFF000000 in order to nullify transparency!
     */
    public static int generateColor(int[] colorsIn, String algorithm) {
        if (algorithm.equals(PaletteAlgorithm.COMPLEMENTARY)) {
            return Color.RED;
        }
        else if (algorithm.equals(PaletteAlgorithm.RANDOM)) {
            Random rng = new Random();
            // Return a random number in the range 0 to 2^24
            return (rng.nextInt(0x01000000) | 0xFF000000);
        }
        else return 0;
    }

}
